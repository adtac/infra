#!/usr/bin/env python

import argparse
import os
import json
import sys
import difflib
import requests
import urllib
import spotipy
from mutagen.flac import FLAC, Picture
from spotipy.oauth2 import SpotifyClientCredentials

parser = argparse.ArgumentParser(description="flacmatch matches FLAC files")
parser.add_argument("--provider", type=str, choices=["apple", "spotify"], default="apple", help="upstream provider")
parser.add_argument("--country", type=str, default="us", help="upstream provider country")
parser.add_argument("--id", type=str, required=True, help="album ID in upstream provider")
parser.add_argument("--interactive", type=bool, help="process album interactively")

apple_headers = {
    "Authorization": "Bearer {}".format(os.getenv("APPLE_TOKEN"))
}

def similarity(x, y):
    return difflib.SequenceMatcher(a=x.lower(), b=y.lower()).ratio()

def artistSplit(s):
    comps = s.split("&")
    if len(comps) > 1:
        for artist in artistSplit("&".join(comps[:-1])):
            yield artist
        yield comps[-1].strip()
        return

    for artist in s.split(","):
        yield artist.strip()

def match_file(trackNumber, name, length):
    matches = []
    for _, _, files in os.walk("."):
        for f in sorted(files):
            if not f.endswith(".flac"):
                continue
            fname = f[:f.find(".flac")]

            fnametn = ""
            while fname[0].isdigit():
                fnametn += fname[0]
                fname = fname[1:]
            if fnametn != "":
                fnametn = int(fnametn)

            fname = fname.strip()
            if fname[0] == "-" or fname[0] == ".":
                fname = fname[1:].strip()

            total_score = 0

            total_score += similarity(fname, name)
            if name.lower() in fname.lower():
                total_score += 0.3

            if fnametn != "" and fnametn == trackNumber:
                total_score += 1

            flac = FLAC(f)
            diff = abs(flac.info.length - length / 1000)
            if diff < 2:
                total_score += 1
            else:
                total_score += 2 / diff

            matches.append((total_score, f, flac))

    return sorted(matches)[-1]

def set_cover(url, width, height):
    print("downloading artwork {}x{}...".format(width, height))
    picture = Picture()
    with open("cover.jpg", "wb") as f:
        r = requests.get(url)
        data = r.content
        f.write(data)
        picture.data = data
        picture.mime = "image/jpeg"
        picture.width = width
        picture.height = height
    return picture

def get_disc_count(tracks):
    disc_count = 0
    for track in tracks:
        disc_count = max(disc_count, track["disc_number"])
    return disc_count

def set_album(interactive=False, album_name=None, album_artists=None, year=None, tracks=None, cover=None):
    disc_count = get_disc_count(tracks)
    track_count = len(tracks)
    for track in tracks:
        name = track["name"]
        artists = track["artists"]
        track_number = track["track_number"]
        disc_number = track["disc_number"]
        duration = track["duration"]
        print("  ({}.{}/{}.{}) {}".format(disc_number, track_number, disc_count, track_count, name))

        f, flac = None, None
        if not interactive:
            best = match_file(track_number, name, duration)
            score, f, flac = best
            if score < 1.35:
                print("    no match found (best = {})".format(best))
                continue
            else:
                print("    match: {} (score = {})".format(f, score))
        else:
            fs = []
            for _, _, files in os.walk("."):
                for f in sorted(files):
                    if f.endswith(".flac"):
                        print("    {}. {}".format(len(fs) + 1, f))
                        fs.append(f)
            idx = int(input("idx? "))
            if idx == 0:
                continue
            f, flac = fs[idx - 1], FLAC(fs[idx - 1])

        print("    setting cover art...")
        flac.clear_pictures()
        flac.add_picture(cover)

        print("    resetting tags...")
        flac.delete()
        flac["TITLE"] = name
        flac["ARTIST"] = artists
        flac["ALBUM"] = album_name
        flac["TRACKNUMBER"] = str(track_number)
        flac["TOTALTRACKS"] = str(track_count)
        flac["DISCNUMBER"] = str(disc_number)
        flac["ALBUMARTIST"] = album_artists
        flac["DATE"] = year
        flac.save()

        print("    renaming file...")
        os.rename(f, "{:02d} - {}.flac".format(track_number, name))

def spotify_set_album(spid, interactive=False):
    sp = spotipy.Spotify(client_credentials_manager=SpotifyClientCredentials())

    print("getting SPID {}...".format(spid))
    album = sp.album(spid)

    cover = set_cover(album["images"][0]["url"], album["images"][0]["width"], album["images"][0]["height"])

    tracks = []
    for track in album["tracks"]["items"]:
        tracks.append({
            "name": track["name"],
            "artists": [artist["name"] for artist in track["artists"]],
            "disc_number": track["disc_number"],
            "track_number": track["track_number"],
            "duration": track["duration_ms"],
        })

    return set_album(
        interactive=interactive,
        album_name=album["name"],
        album_artists=[artist["name"] for artist in album["artists"]],
        year=album["release_date"].split("-")[0],
        tracks=tracks,
        cover=cover,
    )


def apple_set_album(country, amid, interactive=False):
    apple_headers = {
    }
    url = "https://api.music.apple.com/v1/catalog/{}/albums?ids={}".format(country, amid)
    print("getting AMID {}...".format(amid))
    r = requests.get(url, headers={
        "Authorization": "Bearer {}".format(os.getenv("APPLE_TOKEN"))
    })
    if r.status_code != 200: return r.text
    result = r.json()

    if len(result["data"]) == 0:
        print("no such AMID")
        return

    album = result["data"][0]
    attrs = album["attributes"]

    cover = set_cover(attrs["artwork"]["url"].replace("{w}", "500").replace("{h}", "500"), 500, 500)

    year = 1e9
    tracks = []
    for track in album["relationships"]["tracks"]["data"]:
        attrs = track["attributes"]
        year = min(int(attrs["releaseDate"].split("-")[0]), year)
        tracks.append({
            "name": attrs["name"],
            "artists": list(artistSplit(attrs["artistName"])),
            "disc_number": attrs["discNumber"],
            "track_number": attrs["trackNumber"],
            "duration": attrs["durationInMillis"],
        })

    set_album(
        interactive=interactive,
        album_name=attrs["name"],
        album_artists=list(artistSplit(attrs["artistName"])),
        year=str(year),
        tracks=tracks,
        cover=cover,
    )

def main():
    global country
    args = parser.parse_args()
    if args.provider == "apple":
        return apple_set_album(args.country, args.id, interactive=args.interactive)
    else:
        return spotify_set_album(args.id, interactive=args.interactive)

if __name__ == "__main__":
    err = main()
    if err is not None: print(err)
